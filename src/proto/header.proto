syntax = "proto3";

package rypt;

// 'rypt' format file header. Note, the header itself is not encrypted (as its contents are needed for decryption),
// but it is always authenticated via the AEAD encryption algorithm.
message FileHeader {
    // File Format version; every backwards-incompatible change will result in increment here.
    // Decryptors must reject version above the one they support.
    FormatVersion version = 1;

    // Which crypto algorithms to use and corresponding config. Required.
    oneof crypto_family {
        LibsodiumCryptoFamily libsodium = 2;
        // ids 3, 4, 5 are reserved for future algorithms.
    }

    // Public key for the ephemeral keypair generated for this file.
    bytes ephemeral_pk = 6;

    // Encrypted payload_key.
    CompositeKey payload_key = 8;

    // Encrypted 'EncryptedHeader' protobuf.
    bytes encrypted_header_data = 9;

    // User-supplied additional non-encrypted data that will be authenticated together with the rest of
    // the file. Optional.
    bytes associated_data = 11;
}

enum FormatVersion {
    UNKNOWN_FORMAT = 0;
    BASIC_ENCRYPTION = 1;
    SIGNED_SENDER = 2;
    REPUDIABLE_SENDER = 3;
    SECRET_SHARING = 4;
}

message LibsodiumCryptoFamily {
    enum AEADAlgorithm {
        UNKNOWN_ALGORITHM = 0;
        CHACHA20POLY1305 = 1;
        AES256GCM = 2;
        // Potentially HMAC for non-encrypted but signed files.
    }
    AEADAlgorithm aead_algorithm = 1;
}

// CompositeKey is a data structure that can represent a wide range of key requirement setups, allowing complex
// expressions like requiring "master_key OR ANY-2-OF(key1, key2, (key3a OR key3b))".
// When trying to decrypt a file, CompositeKey is recursively evaluated given a set of Credentials (passwords,
// private keys, etc), resulting in the payload key if successful.
message CompositeKey {
    // Threshold defines how many key parts are required to recreate the payload key and how to do that:
    //   * threshold = 1 (or default 0) - any one key part is sufficient ("OR" operation), just use any of them directly.
    //   * threshold = N - all key parts are required ("AND" operation); to get the resulting key, do a bitwise-XOR.
    //   * 1 < threshold < N - use Shamir's Secret Sharing scheme. NOTE: Currently N is limited to 255 in this case.
    // NOTE: Total number of key parts N is not the same as key_parts.len() because EncryptedKeyParts can provide
    // several key parts (see num_key_parts field)
    uint64 threshold = 1;

    // Key parts encrypted by Credentials. All key parts must have the same length.
    repeated EncryptedKeyParts key_parts = 2;
}

// Key parts encrypted by Credentials. When evaluated, this structure results in 0, 1 or more key parts, depending on
// how many Credentials matched and how many parts are included.
message EncryptedKeyParts {
    // How many key parts are included in the key data below. Default value of 0 is treated as 1.
    uint64 num_key_parts = 1;

    // Key data is N key parts concatenated, where N is given in 'parts_included' field above. All key parts must be
    // the same size, so decoding is easy - just split the key data into N equal chunks.
    oneof key_data {
        // Key data that is directly encrypted using one of the Credentials (using either AEAD or Box construction).
        bytes encrypted_key_data = 2;

        // Key data is the result of recursive CompositeKey evaluation.
        CompositeKey composite_key = 3;
    }
}

enum SenderAuthType {
    UNKNOWN_SENDER_AUTH_TYPE = 0;
    ANONYMOUS = 1;
    //SIGNED = 2;
    //REPUDIABLE = 3;
}

message EncryptedHeader {
    // Length in bytes of plaintext 'chunks' that we're encrypting and authenticating. The source file/stream
    // has to be split into chunks to avoid having to read all the contents into memory. All chunks have the same
    // length except the last one, which might be smaller.
    // NOTE: Corresponding chunks in encrypted file are usually larger, to accommodate MAC codes. This additional size
    // depends on the algorithm.
    fixed64 plaintext_chunk_size = 4;

    SenderAuthType sender_auth_type = 1;

    bytes sender_pk = 2;

    //fixed32 repudiable_auth_count = 3;
}
